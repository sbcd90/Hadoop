INSTALLATION INSTRUCTIONS FOR SWIFT IN MONSOON
==============================================

1. Create a simple Ubuntu Virtual Machine in Monsoon.

    - Create a new project in Monsoon.
    - Add a system with 4CPUs/6 GB.
    - Select Ubuntu 14.04 from the list of available OS.
    - Create the Monsoon Instance.
    
2. Logon to the virtual machine via putty.

    - Download Putty Client from here. http://the.earth.li/~sgtatham/putty/latest/x86/putty.exe
    - Get credentials from Monsoon & login via putty.
    
2. Add following lines of code to ~/.bashrc file after login to the Ubuntu system.

export http_proxy=http://proxy.wdf.sap.corp:8080
export HTTP_PROXY=http://proxy.wdf.sap.corp:8080
export https_proxy=http://proxy.wdf.sap.corp:8080
export HTTPS_PROXY=http://proxy.wdf.sap.corp:8080

3. Add following lines of code to /etc/apt/apt.conf to allow installation of packages via apt-get from behind the SAP Proxy

- Open the file with root permissions. sudo vim /etc/apt/apt.conf
- Add the following line of code

Acquire::http::Proxy "http://proxy.wdf.sap.corp:8080";


4. Install git if not already installed

sudo apt-get install git


5. Get the latest source code of openstack-swift from Github

- Get the latest source code like this. git clone https://github.com/openstack-dev/devstack.git
- Navigate to the downloaded directory. cd devstack


6. Change following lines of code in the file stackrc.

- Change line GIT_BASE=${GIT_BASE:-git://git.openstack.org} to GIT_BASE=${GIT_BASE:-https://git.openstack.org}
- Check http://stackoverflow.com/questions/20390267/installing-openstack-errors for further details

Code in stackrc to be changed

# Base GIT Repo URL
# Another option is https://git.openstack.org
GIT_BASE=${GIT_BASE:-https://git.openstack.org}


7. Add a file with name local.conf in devstack/ with content like below

[[local|localrc]]
DEST=/opt/stack
ADMIN_PASSWORD=secrete
DATABASE_PASSWORD=$ADMIN_PASSWORD
RABBIT_PASSWORD=$ADMIN_PASSWORD
SERVICE_PASSWORD=$ADMIN_PASSWORD
SERVICE_TOKEN=a682f596-76f3-11e3-b3b2-e716f9080d50

##logging
LOGFILE=$DEST/logs/stack.sh.log
LOGDAYS=1

##services
disable_all_services
enable_service key mysql s-proxy s-object s-container s-account

##swift
SWIFT_HASH=66a3d6b56c1f479c8b4e70ab5c2000f5
SWIFT_REPLICAS=1
SWIFT_DATA_DIR=$DEST/data/swift


/**
* For Keystone v3
**/
8. Add a line in the file "devstack/lib/swift" & in function "configure_swift()"

iniset ${SWIFT_CONFIG_PROXY_SERVER} filter:authtoken auth_version v3.0

Look for the following lines in the function mentioned above( search for the term "iniset ${SWIFT_CONFIG_PROXY_SERVER} filter:authtoken"  in the file "https://github.com/openstack-dev/devstack/blob/master/lib/swift" to find the line number, add the line below the following lines ):

    iniset ${SWIFT_CONFIG_PROXY_SERVER} filter:authtoken log_name swift

    iniset ${SWIFT_CONFIG_PROXY_SERVER} filter:authtoken paste.filter_factory keystonemiddleware.auth_token:filter_factory
    configure_auth_token_middleware $SWIFT_CONFIG_PROXY_SERVER swift $SWIFT_AUTH_CACHE_DIR filter:authtoken
    iniset ${SWIFT_CONFIG_PROXY_SERVER} filter:authtoken delay_auth_decision 1
    iniset ${SWIFT_CONFIG_PROXY_SERVER} filter:authtoken cache swift.cache
    iniset ${SWIFT_CONFIG_PROXY_SERVER} filter:authtoken include_service_catalog False

9. Change a line in devstack/lib/keystone 

Look for the following line in the file. https://github.com/openstack-dev/devstack/blob/master/lib/keystone

KEYSTONE_TOKEN_FORMAT=${KEYSTONE_TOKEN_FORMAT:-}

& change it to

KEYSTONE_TOKEN_FORMAT=${KEYSTONE_TOKEN_FORMAT:-UUID}


10. Start running the stack.sh script in devstack/

./stack.sh


11. Navigate to root (~) & install openstack client from github using the following commands:

git clone https://github.com/openstack/python-openstackclient.git openstackclient

cd openstackclient

sudo python setup.py install

cd ..


12. Execute the following commands:

openstack --os-url http://<<ip address provided at the end of the script or by running the command ifconfig>:5000/v3 --os-identity-api-version 3 --os-token=<get token from local.conf file> domain create d1

openstack --os-url http://<<ip address provided at the end of the script or by running the command ifconfig>:5000/v3 --os-identity-api-version 3 --os-token=<get token from local.conf file> project create p1 --domain d1

openstack --os-url http://<<ip address provided at the end of the script or by running the command ifconfig>:5000/v3 --os-identity-api-version 3 --os-token=<get token from local.conf file> user create u1 --domain d1 --password <get password from local.conf>

openstack --os-url http://<<ip address provided at the end of the script or by running the command ifconfig>:5000/v3 --os-identity-api-version 3 --os-token=<get token from local.conf file> role create admin

openstack --os-url http://<<ip address provided at the end of the script or by running the command ifconfig>:5000/v3 --os-identity-api-version 3 --os-token=<get token from local.conf file> role add --user u1 --project p1 admin


14. swift --os-auth-url http://<ip address provided at the end of the script or by running the command ifconfig>:5000/v3 --os-username u1 --os-user-domain-name d1 --os-project-name p1 --os-project-domain-name d1 --os-password <get password from local.conf> -V 3 <any swift command>

/**
* not required for Keystone v3
**/
11. After the script is fully run, go back to the home directory '~' & create a file keystonerc with the folowing content

export OS_USERNAME=admin
export OS_PASSWORD=secrete
export OS_TENANT_NAME=admin
export OS_AUTH_URL=http://<ip address provided at the end of the script or by running the command ifconfig>:35357/v3

ifconfig looks like this:

eth0      Link encap:Ethernet  HWaddr 00:50:56:a4:23:58
          inet addr:10.97.24.97  Bcast:10.97.31.255  Mask:255.255.240.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:3200171 errors:0 dropped:0 overruns:0 frame:0
          TX packets:74175 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:1329930247 (1.3 GB)  TX bytes:9052236 (9.0 MB)

lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:6913 errors:0 dropped:0 overruns:0 frame:0
          TX packets:6913 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:992884 (992.8 KB)  TX bytes:992884 (992.8 KB)

We should pick up 'inet addr'.


10. Make keystonerc available as environment variable with the following command

source ~/keystonerc

11. Get the list of keystone services with command

keystone service-list


12. Create the endpoints with keystone using the following command.

keystone endpoint-create --region RegionOne --service-id=<swift object store service id retrieved from the last command> --publicurl 'http://<ip address provided at the end of the script or by running the command ifconfig>:8080/v1/AUTH_$(tenant_id)s' --adminurl 'http://<ip address provided at the end of the script or by running the command ifconfig>:8080' --internalurl 'http://<ip address provided at the end of the script or by running the command ifconfig>:8080/v1/AUTH_$(tenant_id)s'


13. Get one-time token from Swift by trigerring the following REST-URL from POSTMAN:

POST: http://10.97.24.97:5000/v2.0/tokens

HEADER: Content-Type: application/json

BODY: 

{
  "auth": {
    "passwordCredentials": {
      "username": "admin",
      "password": "secrete"
    },
    "tenantName": "admin"
  }
}

READ The Tenant-Id & Token-Id from the response.


14. Now create a new container in Swift like this:

PUT: http://10.97.24.97:8080/v1/AUTH_<TenantId>/<ContainerName>

HEADER: X-Auth-Token: <Token Id>

Enjoy!!